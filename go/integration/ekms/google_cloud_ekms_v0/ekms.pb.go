// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google_cloud_ekms_v0/ekms.proto

package google_cloud_ekms_v0

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AccessReasonContext_Reason int32

const (
	// No reason is available for the access.
	AccessReasonContext_REASON_UNSPECIFIED AccessReasonContext_Reason = 0
	// Existing Access Transparency Types, please refer to public documentation
	// of Justification Reason Codes in
	// https://cloud.google.com/logging/docs/audit/reading-access-transparency-logs#justification-reason-codes
	AccessReasonContext_CUSTOMER_INITIATED_SUPPORT AccessReasonContext_Reason = 1
	AccessReasonContext_GOOGLE_INITIATED_SERVICE   AccessReasonContext_Reason = 2
	AccessReasonContext_THIRD_PARTY_DATA_REQUEST   AccessReasonContext_Reason = 3
	AccessReasonContext_GOOGLE_INITIATED_REVIEW    AccessReasonContext_Reason = 4
	// Customer uses their own account or grants IAM permission to some partner
	// of theirs to perform any access to their own data which is authorized by
	// their own IAM policy.
	AccessReasonContext_CUSTOMER_INITIATED_ACCESS AccessReasonContext_Reason = 5
	// Google accesses data to help optimize the dataâ€™s structure or quality for
	// future uses by the customer. This includes but is not limited to accesses
	// for the purposes of indexing, structuring, precomputation, hashing,
	// sharding and caching.
	AccessReasonContext_GOOGLE_INITIATED_SYSTEM_OPERATION AccessReasonContext_Reason = 6
)

var AccessReasonContext_Reason_name = map[int32]string{
	0: "REASON_UNSPECIFIED",
	1: "CUSTOMER_INITIATED_SUPPORT",
	2: "GOOGLE_INITIATED_SERVICE",
	3: "THIRD_PARTY_DATA_REQUEST",
	4: "GOOGLE_INITIATED_REVIEW",
	5: "CUSTOMER_INITIATED_ACCESS",
	6: "GOOGLE_INITIATED_SYSTEM_OPERATION",
}

var AccessReasonContext_Reason_value = map[string]int32{
	"REASON_UNSPECIFIED":                0,
	"CUSTOMER_INITIATED_SUPPORT":        1,
	"GOOGLE_INITIATED_SERVICE":          2,
	"THIRD_PARTY_DATA_REQUEST":          3,
	"GOOGLE_INITIATED_REVIEW":           4,
	"CUSTOMER_INITIATED_ACCESS":         5,
	"GOOGLE_INITIATED_SYSTEM_OPERATION": 6,
}

func (x AccessReasonContext_Reason) String() string {
	return proto.EnumName(AccessReasonContext_Reason_name, int32(x))
}

func (AccessReasonContext_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{5, 0}
}

// Wrap a key with an External-KMS-defined AEAD scheme.
type WrapRequest struct {
	// Required. A unique, External-KMS-defined resource identifier for
	// the key.
	// e.g. `accounts/customer-id/keys/key1`.
	// If the corresponding key does not exist, the key can optionally be
	// created.
	KeyPath string `protobuf:"bytes,1,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// Required. The data to be wrapped. Must be no larger than 64KiB.
	Plaintext         []byte          `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	AdditionalContext *RequestContext `protobuf:"bytes,3,opt,name=additional_context,json=additionalContext,proto3" json:"additional_context,omitempty"`
	// Optional data that, if specified, must also be provided during
	// decryption through [UnwrapRequest.additional_authenticated_data][].
	// The AAD must be no larger than 64KiB.
	AdditionalAuthenticatedData []byte `protobuf:"bytes,4,opt,name=additional_authenticated_data,json=additionalAuthenticatedData,proto3" json:"additional_authenticated_data,omitempty"`
	// Optional data that, if specified, defines the full key URI together with
	// the `key_path` field. The key uri is `key_uri_prefix/key_path`. That is,
	// `key_uri_prefix` is equal to `scheme | host | /v0/` where `|` is
	// concatenation.
	KeyUriPrefix         string   `protobuf:"bytes,5,opt,name=key_uri_prefix,json=keyUriPrefix,proto3" json:"key_uri_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WrapRequest) Reset()         { *m = WrapRequest{} }
func (m *WrapRequest) String() string { return proto.CompactTextString(m) }
func (*WrapRequest) ProtoMessage()    {}
func (*WrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{0}
}

func (m *WrapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WrapRequest.Unmarshal(m, b)
}
func (m *WrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WrapRequest.Marshal(b, m, deterministic)
}
func (m *WrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrapRequest.Merge(m, src)
}
func (m *WrapRequest) XXX_Size() int {
	return xxx_messageInfo_WrapRequest.Size(m)
}
func (m *WrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WrapRequest proto.InternalMessageInfo

func (m *WrapRequest) GetKeyPath() string {
	if m != nil {
		return m.KeyPath
	}
	return ""
}

func (m *WrapRequest) GetPlaintext() []byte {
	if m != nil {
		return m.Plaintext
	}
	return nil
}

func (m *WrapRequest) GetAdditionalContext() *RequestContext {
	if m != nil {
		return m.AdditionalContext
	}
	return nil
}

func (m *WrapRequest) GetAdditionalAuthenticatedData() []byte {
	if m != nil {
		return m.AdditionalAuthenticatedData
	}
	return nil
}

func (m *WrapRequest) GetKeyUriPrefix() string {
	if m != nil {
		return m.KeyUriPrefix
	}
	return ""
}

// Response message for [GCPExternalKeyManagementService.Wrap][].
type WrapResponse struct {
	// The wrapped blob.
	WrappedBlob          []byte   `protobuf:"bytes,1,opt,name=wrapped_blob,json=wrappedBlob,proto3" json:"wrapped_blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WrapResponse) Reset()         { *m = WrapResponse{} }
func (m *WrapResponse) String() string { return proto.CompactTextString(m) }
func (*WrapResponse) ProtoMessage()    {}
func (*WrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{1}
}

func (m *WrapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WrapResponse.Unmarshal(m, b)
}
func (m *WrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WrapResponse.Marshal(b, m, deterministic)
}
func (m *WrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrapResponse.Merge(m, src)
}
func (m *WrapResponse) XXX_Size() int {
	return xxx_messageInfo_WrapResponse.Size(m)
}
func (m *WrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WrapResponse proto.InternalMessageInfo

func (m *WrapResponse) GetWrappedBlob() []byte {
	if m != nil {
		return m.WrappedBlob
	}
	return nil
}

// Unwrap a blob that was previously returned in the WrapResponse.
type UnwrapRequest struct {
	// Required. A unique, External-KMS-defined resource identifier for
	// the key.
	// e.g. `accounts/customer-id/keys/key1`.
	KeyPath string `protobuf:"bytes,1,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty"`
	// Required. The wrapped data originally returned in
	// [WrapResponse.wrapped_blob][].
	WrappedBlob []byte `protobuf:"bytes,2,opt,name=wrapped_blob,json=wrappedBlob,proto3" json:"wrapped_blob,omitempty"`
	// For future use.
	AdditionalContext *RequestContext `protobuf:"bytes,3,opt,name=additional_context,json=additionalContext,proto3" json:"additional_context,omitempty"`
	// Optional data that must match the data originally supplied in
	// [WrapRequest.additional_authenticated_data][].
	AdditionalAuthenticatedData []byte `protobuf:"bytes,4,opt,name=additional_authenticated_data,json=additionalAuthenticatedData,proto3" json:"additional_authenticated_data,omitempty"`
	// Optional data that, if specified, defines the full key URI together with
	// the `key_path` field. The key uri is `key_uri_prefix/key_path`. That is,
	// `key_uri_prefix` is equal to `scheme | host | /v0/` where `|` is
	// concatenation.
	KeyUriPrefix         string   `protobuf:"bytes,5,opt,name=key_uri_prefix,json=keyUriPrefix,proto3" json:"key_uri_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnwrapRequest) Reset()         { *m = UnwrapRequest{} }
func (m *UnwrapRequest) String() string { return proto.CompactTextString(m) }
func (*UnwrapRequest) ProtoMessage()    {}
func (*UnwrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{2}
}

func (m *UnwrapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnwrapRequest.Unmarshal(m, b)
}
func (m *UnwrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnwrapRequest.Marshal(b, m, deterministic)
}
func (m *UnwrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnwrapRequest.Merge(m, src)
}
func (m *UnwrapRequest) XXX_Size() int {
	return xxx_messageInfo_UnwrapRequest.Size(m)
}
func (m *UnwrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnwrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnwrapRequest proto.InternalMessageInfo

func (m *UnwrapRequest) GetKeyPath() string {
	if m != nil {
		return m.KeyPath
	}
	return ""
}

func (m *UnwrapRequest) GetWrappedBlob() []byte {
	if m != nil {
		return m.WrappedBlob
	}
	return nil
}

func (m *UnwrapRequest) GetAdditionalContext() *RequestContext {
	if m != nil {
		return m.AdditionalContext
	}
	return nil
}

func (m *UnwrapRequest) GetAdditionalAuthenticatedData() []byte {
	if m != nil {
		return m.AdditionalAuthenticatedData
	}
	return nil
}

func (m *UnwrapRequest) GetKeyUriPrefix() string {
	if m != nil {
		return m.KeyUriPrefix
	}
	return ""
}

// Response message for  [GCPExternalKeyManagementService.Unwrap][].
type UnwrapResponse struct {
	// The decrypted data originally supplied in [WrapRequest.plaintext][].
	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	// A maximum duration the unwrapped key is allowed to be cached by the
	// caller.
	// Must be positive.
	AllowedCacheDuration *duration.Duration `protobuf:"bytes,2,opt,name=allowed_cache_duration,json=allowedCacheDuration,proto3" json:"allowed_cache_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UnwrapResponse) Reset()         { *m = UnwrapResponse{} }
func (m *UnwrapResponse) String() string { return proto.CompactTextString(m) }
func (*UnwrapResponse) ProtoMessage()    {}
func (*UnwrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{3}
}

func (m *UnwrapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnwrapResponse.Unmarshal(m, b)
}
func (m *UnwrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnwrapResponse.Marshal(b, m, deterministic)
}
func (m *UnwrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnwrapResponse.Merge(m, src)
}
func (m *UnwrapResponse) XXX_Size() int {
	return xxx_messageInfo_UnwrapResponse.Size(m)
}
func (m *UnwrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnwrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnwrapResponse proto.InternalMessageInfo

func (m *UnwrapResponse) GetPlaintext() []byte {
	if m != nil {
		return m.Plaintext
	}
	return nil
}

func (m *UnwrapResponse) GetAllowedCacheDuration() *duration.Duration {
	if m != nil {
		return m.AllowedCacheDuration
	}
	return nil
}

// More context provided by during [Wrap][] and [Unwrap][] operations.
type RequestContext struct {
	// The full resource name for the GCP resource being directly wrapped by
	// the EKEK (i.e. the Cloud KMS CryptoKey resource)
	// See cloud.google.com/apis/design/resource_names#full_resource_name
	// For a Cloud KMS CryptoKey resource, this includes the Cloud KMS
	// Location associated with the resource.
	FullResourceName string `protobuf:"bytes,1,opt,name=full_resource_name,json=fullResourceName,proto3" json:"full_resource_name,omitempty"`
	// The relative resource name for the GCP resource being directly wrapped by
	// the EKEK (i.e. the Cloud KMS CryptoKey resource)
	// See cloud.google.com/apis/design/resource_names#relative_resource_name
	// This is a substring of the RequestContext's full_resource_name.
	RelativeResourceName string `protobuf:"bytes,2,opt,name=relative_resource_name,json=relativeResourceName,proto3" json:"relative_resource_name,omitempty"`
	// Optional. Request that has an empty AccessReasonContext is a
	// valid request. This can happen:
	// * If customer does not enable key justification on their key
	//   or the partner endpoint is not whitelisted to receive justification.
	// * If customer enables key justification, then this may have been due to a
	//   Google transient error or a bug that needs Google to take a look into.
	AccessReasonContext *AccessReasonContext `protobuf:"bytes,3,opt,name=access_reason_context,json=accessReasonContext,proto3" json:"access_reason_context,omitempty"`
	// Required. Whether the request is a key health check that contains a
	// canonical plaintext or its encryption instead of customer data.
	IsKeyHealthCheck     bool     `protobuf:"varint,4,opt,name=is_key_health_check,json=isKeyHealthCheck,proto3" json:"is_key_health_check,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestContext) Reset()         { *m = RequestContext{} }
func (m *RequestContext) String() string { return proto.CompactTextString(m) }
func (*RequestContext) ProtoMessage()    {}
func (*RequestContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{4}
}

func (m *RequestContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestContext.Unmarshal(m, b)
}
func (m *RequestContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestContext.Marshal(b, m, deterministic)
}
func (m *RequestContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestContext.Merge(m, src)
}
func (m *RequestContext) XXX_Size() int {
	return xxx_messageInfo_RequestContext.Size(m)
}
func (m *RequestContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestContext.DiscardUnknown(m)
}

var xxx_messageInfo_RequestContext proto.InternalMessageInfo

func (m *RequestContext) GetFullResourceName() string {
	if m != nil {
		return m.FullResourceName
	}
	return ""
}

func (m *RequestContext) GetRelativeResourceName() string {
	if m != nil {
		return m.RelativeResourceName
	}
	return ""
}

func (m *RequestContext) GetAccessReasonContext() *AccessReasonContext {
	if m != nil {
		return m.AccessReasonContext
	}
	return nil
}

func (m *RequestContext) GetIsKeyHealthCheck() bool {
	if m != nil {
		return m.IsKeyHealthCheck
	}
	return false
}

type AccessReasonContext struct {
	// required.
	Reason               AccessReasonContext_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=google.cloud.ekms.v0.AccessReasonContext_Reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AccessReasonContext) Reset()         { *m = AccessReasonContext{} }
func (m *AccessReasonContext) String() string { return proto.CompactTextString(m) }
func (*AccessReasonContext) ProtoMessage()    {}
func (*AccessReasonContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_faafa1e2b179f66b, []int{5}
}

func (m *AccessReasonContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessReasonContext.Unmarshal(m, b)
}
func (m *AccessReasonContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessReasonContext.Marshal(b, m, deterministic)
}
func (m *AccessReasonContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessReasonContext.Merge(m, src)
}
func (m *AccessReasonContext) XXX_Size() int {
	return xxx_messageInfo_AccessReasonContext.Size(m)
}
func (m *AccessReasonContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessReasonContext.DiscardUnknown(m)
}

var xxx_messageInfo_AccessReasonContext proto.InternalMessageInfo

func (m *AccessReasonContext) GetReason() AccessReasonContext_Reason {
	if m != nil {
		return m.Reason
	}
	return AccessReasonContext_REASON_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("google.cloud.ekms.v0.AccessReasonContext_Reason", AccessReasonContext_Reason_name, AccessReasonContext_Reason_value)
	proto.RegisterType((*WrapRequest)(nil), "google.cloud.ekms.v0.WrapRequest")
	proto.RegisterType((*WrapResponse)(nil), "google.cloud.ekms.v0.WrapResponse")
	proto.RegisterType((*UnwrapRequest)(nil), "google.cloud.ekms.v0.UnwrapRequest")
	proto.RegisterType((*UnwrapResponse)(nil), "google.cloud.ekms.v0.UnwrapResponse")
	proto.RegisterType((*RequestContext)(nil), "google.cloud.ekms.v0.RequestContext")
	proto.RegisterType((*AccessReasonContext)(nil), "google.cloud.ekms.v0.AccessReasonContext")
}

func init() { proto.RegisterFile("google_cloud_ekms_v0/ekms.proto", fileDescriptor_faafa1e2b179f66b) }

var fileDescriptor_faafa1e2b179f66b = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xcf, 0x6e, 0xe3, 0x44,
	0x18, 0x27, 0xde, 0x6e, 0xd8, 0x9d, 0x86, 0xca, 0x4c, 0x4b, 0x49, 0xd3, 0x76, 0xb7, 0xf5, 0x16,
	0xa9, 0x54, 0x90, 0x94, 0xc2, 0x69, 0x25, 0x0e, 0x5e, 0x67, 0x68, 0xad, 0xa5, 0xb1, 0x19, 0x3b,
	0xbb, 0xda, 0x03, 0x1a, 0x4d, 0xec, 0xaf, 0x8d, 0x15, 0xd7, 0x36, 0xf6, 0x38, 0x6d, 0x84, 0x10,
	0xd2, 0x4a, 0xdc, 0xe0, 0xc4, 0x13, 0xf1, 0x0c, 0x3c, 0x00, 0x17, 0x1e, 0x04, 0x79, 0x6c, 0xab,
	0x6d, 0x12, 0xad, 0xf6, 0xca, 0xc9, 0xf2, 0xef, 0xcf, 0xf7, 0xcd, 0xfc, 0xbe, 0x99, 0x41, 0x4f,
	0x2f, 0xe3, 0xf8, 0x32, 0x04, 0xe6, 0x85, 0x71, 0xee, 0x33, 0x98, 0x5c, 0x65, 0x6c, 0x7a, 0xdc,
	0x2b, 0xbe, 0xdd, 0x24, 0x8d, 0x45, 0x8c, 0x37, 0x4a, 0x41, 0x57, 0x0a, 0xba, 0x92, 0x98, 0x1e,
	0x77, 0x76, 0x4a, 0xb4, 0xc7, 0x93, 0xa0, 0xc7, 0xa3, 0x28, 0x16, 0x5c, 0x04, 0x71, 0x54, 0x79,
	0x3a, 0x4f, 0x2a, 0x56, 0xfe, 0x8d, 0xf2, 0x8b, 0x9e, 0x9f, 0xa7, 0x52, 0x50, 0xf2, 0xda, 0x6f,
	0x0a, 0x5a, 0x7d, 0x9d, 0xf2, 0x84, 0xc2, 0x4f, 0x39, 0x64, 0x02, 0x6f, 0xa1, 0x47, 0x13, 0x98,
	0xb1, 0x84, 0x8b, 0x71, 0xbb, 0xb1, 0xd7, 0x38, 0x7c, 0x4c, 0x3f, 0x9c, 0xc0, 0xcc, 0xe6, 0x62,
	0x8c, 0x77, 0xd0, 0xe3, 0x24, 0xe4, 0x41, 0x24, 0xe0, 0x46, 0xb4, 0x95, 0xbd, 0xc6, 0x61, 0x8b,
	0xde, 0x02, 0xd8, 0x41, 0x98, 0xfb, 0x7e, 0x50, 0x94, 0xe6, 0x21, 0xf3, 0xe2, 0x52, 0xf6, 0x60,
	0xaf, 0x71, 0xb8, 0x7a, 0x72, 0xd0, 0x5d, 0xb6, 0xf2, 0x6e, 0xd5, 0xd3, 0x28, 0xb5, 0xf4, 0xe3,
	0x5b, 0x7f, 0x05, 0xe1, 0x17, 0x68, 0xf7, 0x4e, 0x51, 0x9e, 0x8b, 0x31, 0x44, 0x22, 0xf0, 0xb8,
	0x00, 0x9f, 0xf9, 0x5c, 0xf0, 0xf6, 0x8a, 0x5c, 0xc6, 0xf6, 0xad, 0x48, 0xbf, 0xab, 0xe9, 0x73,
	0xc1, 0xf1, 0x01, 0x5a, 0x2b, 0x76, 0x94, 0xa7, 0x01, 0x4b, 0x52, 0xb8, 0x08, 0x6e, 0xda, 0x0f,
	0xe5, 0xbe, 0x5a, 0x13, 0x98, 0x0d, 0xd3, 0xc0, 0x96, 0x98, 0xf6, 0x15, 0x6a, 0x95, 0x31, 0x64,
	0x49, 0x1c, 0x65, 0x80, 0xf7, 0x51, 0xeb, 0x3a, 0xe5, 0x49, 0x02, 0x3e, 0x1b, 0x85, 0xf1, 0x48,
	0x66, 0xd1, 0xa2, 0xab, 0x15, 0xf6, 0x22, 0x8c, 0x47, 0xda, 0xef, 0x0a, 0xfa, 0x68, 0x18, 0x5d,
	0xbf, 0x5f, 0x78, 0xf3, 0xf5, 0x94, 0x85, 0x7a, 0xff, 0xf7, 0x04, 0x7f, 0x45, 0x6b, 0x75, 0x1a,
	0x55, 0x86, 0xf7, 0x0e, 0x4c, 0x63, 0xfe, 0xc0, 0x58, 0x68, 0x93, 0x87, 0x61, 0x7c, 0x0d, 0x3e,
	0xf3, 0xb8, 0x37, 0x06, 0x56, 0x9f, 0x4c, 0x99, 0xcd, 0xea, 0xc9, 0x56, 0xbd, 0xe5, 0xfa, 0xe8,
	0x76, 0xfb, 0x95, 0x80, 0x6e, 0x54, 0x46, 0xa3, 0xf0, 0xd5, 0xa8, 0xf6, 0x56, 0x41, 0x6b, 0xf7,
	0x03, 0xc1, 0x5f, 0x20, 0x7c, 0x91, 0x87, 0x21, 0x4b, 0x21, 0x8b, 0xf3, 0xd4, 0x03, 0x16, 0xf1,
	0x2b, 0xa8, 0x46, 0xa3, 0x16, 0x0c, 0xad, 0x88, 0x01, 0xbf, 0x02, 0xfc, 0x0d, 0xda, 0x4c, 0x21,
	0xe4, 0x22, 0x98, 0xc2, 0x9c, 0x43, 0x91, 0x8e, 0x8d, 0x9a, 0xbd, 0xe7, 0xfa, 0x11, 0x7d, 0xc2,
	0x3d, 0x0f, 0xb2, 0x8c, 0xa5, 0xc0, 0xb3, 0x38, 0x9a, 0x9b, 0xdc, 0xe7, 0xcb, 0x27, 0xa7, 0x4b,
	0x0b, 0x95, 0x8e, 0x7a, 0x7c, 0xeb, 0x7c, 0x11, 0xc4, 0x5f, 0xa2, 0xf5, 0x20, 0x63, 0x45, 0xfe,
	0x63, 0xe0, 0xa1, 0x18, 0x33, 0x6f, 0x0c, 0xde, 0x44, 0x8e, 0xed, 0x11, 0x55, 0x83, 0xec, 0x25,
	0xcc, 0xce, 0x24, 0x61, 0x14, 0xb8, 0xf6, 0x97, 0x82, 0xd6, 0x97, 0xd4, 0xc6, 0x67, 0xa8, 0x59,
	0x2e, 0x4f, 0xee, 0x7e, 0xed, 0xe4, 0xf8, 0xbd, 0x97, 0xd5, 0x2d, 0xff, 0x68, 0xe5, 0xd7, 0xfe,
	0x69, 0xa0, 0x66, 0x09, 0xe1, 0x4d, 0x84, 0x29, 0xd1, 0x1d, 0x6b, 0xc0, 0x86, 0x03, 0xc7, 0x26,
	0x86, 0xf9, 0x9d, 0x49, 0xfa, 0xea, 0x07, 0xf8, 0x09, 0xea, 0x18, 0x43, 0xc7, 0xb5, 0xce, 0x09,
	0x65, 0xe6, 0xc0, 0x74, 0x4d, 0xdd, 0x25, 0x7d, 0xe6, 0x0c, 0x6d, 0xdb, 0xa2, 0xae, 0xda, 0xc0,
	0x3b, 0xa8, 0x7d, 0x6a, 0x59, 0xa7, 0xdf, 0x93, 0xbb, 0x2c, 0xa1, 0xaf, 0x4c, 0x83, 0xa8, 0x4a,
	0xc1, 0xba, 0x67, 0x26, 0xed, 0x33, 0x5b, 0xa7, 0xee, 0x1b, 0xd6, 0xd7, 0x5d, 0x9d, 0x51, 0xf2,
	0xc3, 0x90, 0x38, 0xae, 0xfa, 0x00, 0x6f, 0xa3, 0x4f, 0x17, 0xbc, 0x94, 0xbc, 0x32, 0xc9, 0x6b,
	0x75, 0x05, 0xef, 0xa2, 0xad, 0x25, 0x8d, 0x75, 0xc3, 0x20, 0x8e, 0xa3, 0x3e, 0xc4, 0x9f, 0xa1,
	0xfd, 0xc5, 0xbe, 0x6f, 0x1c, 0x97, 0x9c, 0x33, 0xcb, 0x26, 0x54, 0x77, 0x4d, 0x6b, 0xa0, 0x36,
	0x4f, 0xfe, 0x50, 0xd0, 0xd3, 0x53, 0xc3, 0x26, 0x37, 0x02, 0xd2, 0x88, 0x87, 0x2f, 0x61, 0x76,
	0xce, 0x23, 0x7e, 0x09, 0x57, 0x10, 0x09, 0x07, 0xd2, 0x69, 0xe0, 0x01, 0x4e, 0xd0, 0x4a, 0xf1,
	0x5e, 0xe0, 0xfd, 0xe5, 0x39, 0xde, 0x79, 0x52, 0x3b, 0xda, 0xbb, 0x24, 0xe5, 0x55, 0xd1, 0xf6,
	0xdf, 0xfe, 0xfd, 0xef, 0x9f, 0xca, 0xb6, 0xb6, 0xd9, 0x9b, 0x1e, 0xf7, 0x7e, 0xae, 0x1f, 0x91,
	0x6f, 0x8f, 0x8e, 0x7e, 0x79, 0x5e, 0x5c, 0xa9, 0xe7, 0x8d, 0x23, 0x7c, 0x83, 0x9a, 0xe5, 0xfd,
	0xc2, 0xcf, 0x96, 0x17, 0xbc, 0xf7, 0x16, 0x75, 0x0e, 0xde, 0x2d, 0xaa, 0xfa, 0x3e, 0x93, 0x7d,
	0x77, 0xb5, 0xf6, 0x62, 0xdf, 0x3c, 0xaa, 0x3a, 0x8f, 0x9a, 0xf2, 0x06, 0x7e, 0xfd, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x36, 0xe7, 0x07, 0xb0, 0xa1, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GCPExternalKeyManagementServiceClient is the client API for GCPExternalKeyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GCPExternalKeyManagementServiceClient interface {
	// Wraps a plaintext IKEK with the EKEK named in the Request.
	Wrap(ctx context.Context, in *WrapRequest, opts ...grpc.CallOption) (*WrapResponse, error)
	// Unwraps a wrapped IKEK and returns the plaintext.
	Unwrap(ctx context.Context, in *UnwrapRequest, opts ...grpc.CallOption) (*UnwrapResponse, error)
}

type gCPExternalKeyManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewGCPExternalKeyManagementServiceClient(cc *grpc.ClientConn) GCPExternalKeyManagementServiceClient {
	return &gCPExternalKeyManagementServiceClient{cc}
}

func (c *gCPExternalKeyManagementServiceClient) Wrap(ctx context.Context, in *WrapRequest, opts ...grpc.CallOption) (*WrapResponse, error) {
	out := new(WrapResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Wrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCPExternalKeyManagementServiceClient) Unwrap(ctx context.Context, in *UnwrapRequest, opts ...grpc.CallOption) (*UnwrapResponse, error) {
	out := new(UnwrapResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Unwrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCPExternalKeyManagementServiceServer is the server API for GCPExternalKeyManagementService service.
type GCPExternalKeyManagementServiceServer interface {
	// Wraps a plaintext IKEK with the EKEK named in the Request.
	Wrap(context.Context, *WrapRequest) (*WrapResponse, error)
	// Unwraps a wrapped IKEK and returns the plaintext.
	Unwrap(context.Context, *UnwrapRequest) (*UnwrapResponse, error)
}

// UnimplementedGCPExternalKeyManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGCPExternalKeyManagementServiceServer struct {
}

func (*UnimplementedGCPExternalKeyManagementServiceServer) Wrap(ctx context.Context, req *WrapRequest) (*WrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wrap not implemented")
}
func (*UnimplementedGCPExternalKeyManagementServiceServer) Unwrap(ctx context.Context, req *UnwrapRequest) (*UnwrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unwrap not implemented")
}

func RegisterGCPExternalKeyManagementServiceServer(s *grpc.Server, srv GCPExternalKeyManagementServiceServer) {
	s.RegisterService(&_GCPExternalKeyManagementService_serviceDesc, srv)
}

func _GCPExternalKeyManagementService_Wrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCPExternalKeyManagementServiceServer).Wrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Wrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCPExternalKeyManagementServiceServer).Wrap(ctx, req.(*WrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCPExternalKeyManagementService_Unwrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCPExternalKeyManagementServiceServer).Unwrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Unwrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCPExternalKeyManagementServiceServer).Unwrap(ctx, req.(*UnwrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GCPExternalKeyManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.ekms.v0.GCPExternalKeyManagementService",
	HandlerType: (*GCPExternalKeyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Wrap",
			Handler:    _GCPExternalKeyManagementService_Wrap_Handler,
		},
		{
			MethodName: "Unwrap",
			Handler:    _GCPExternalKeyManagementService_Unwrap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google_cloud_ekms_v0/ekms.proto",
}
